# !!! WARNING !!! AUTO-GENERATED FILE, PLEASE DO NOT MODIFY IT AND USE
# https://docs.platformio.org/page/projectconf/section_env_build.html#build-flags
#
# If you need to override existing CMake configuration or add extra,
# please create `CMakeListsUser.txt` in the root of project.
# The `CMakeListsUser.txt` will not be overwritten by PlatformIO.



set(CMAKE_CONFIGURATION_TYPES "mega2560;mksgenlv21;mksgenlv2;mksgenlv1;esp32;" CACHE STRING "Build Types reflect PlatformIO Environments" FORCE)


SET(CMAKE_C_COMPILER "$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/bin/avr-gcc.exe")
SET(CMAKE_CXX_COMPILER "$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/bin/avr-g++.exe")
SET(CMAKE_CXX_FLAGS "-fno-exceptions -fno-threadsafe-statics -fpermissive -std=gnu++11 -O2 -Wall -ffunction-sections -fdata-sections -flto -mmcu=atmega2560 -Werror -Wall -Wextra -Wno-unused-parameter -Wlogical-op -Wuseless-cast -Wdouble-promotion -Wshadow")
SET(CMAKE_C_FLAGS "-std=gnu11 -fno-fat-lto-objects -O2 -Wall -ffunction-sections -fdata-sections -flto -mmcu=atmega2560 -Werror -Wall -Wextra -Wno-unused-parameter -Wlogical-op -Wuseless-cast -Wdouble-promotion -Wshadow")

SET(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)

if (CMAKE_BUILD_TYPE MATCHES "mega2560")
    add_definitions(-D'DO_PRAGMA_\(x\)=_Pragma\(\#x\)')
    add_definitions(-D'DO_PRAGMA\(x\)=DO_PRAGMA_\(x\)')
    add_definitions(-D'PUSH_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic push\);DO_PRAGMA\(GCC diagnostic ignored \"-Wconversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wshadow\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-conversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-compare\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wignored-qualifiers\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wuseless-cast\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wall\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wextra\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wpedantic\"\);')
    add_definitions(-D'POP_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic pop\);')
    add_definitions(-D'PLATFORMIO=50100')
    add_definitions(-D'ARDUINO_AVR_ATmega2560')
    add_definitions(-D'BOARD=BOARD_AVR_MEGA2560')
    add_definitions(-D'F_CPU=16000000L')
    add_definitions(-D'ARDUINO_ARCH_AVR')
    add_definitions(-D'ARDUINO=10808')
    add_definitions(-D'__AVR_ATmega2560__')

    include_directories("${CMAKE_CURRENT_LIST_DIR}")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src/libs/TimerInterrupt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/EEPROM/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/U8g2/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/LiquidTWI2")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Wire/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/LiquidCrystal/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/AccelStepper/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/TMCStepper/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SPI/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SoftwareSerial/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/TinyGPSPlus/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/cores/MegaCore")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/variants/100-pin-arduino-mega")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/AVR_examples/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Optiboot_flasher/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SD/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Servo/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Timer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include-fixed")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/avr/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/tool-unity")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mega2560/*.*
    )
endif()

if (CMAKE_BUILD_TYPE MATCHES "mksgenlv21")
    add_definitions(-D'DO_PRAGMA_\(x\)=_Pragma\(\#x\)')
    add_definitions(-D'DO_PRAGMA\(x\)=DO_PRAGMA_\(x\)')
    add_definitions(-D'PUSH_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic push\);DO_PRAGMA\(GCC diagnostic ignored \"-Wconversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wshadow\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-conversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-compare\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wignored-qualifiers\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wuseless-cast\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wall\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wextra\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wpedantic\"\);')
    add_definitions(-D'POP_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic pop\);')
    add_definitions(-D'PLATFORMIO=50100')
    add_definitions(-D'ARDUINO_AVR_ATmega2560')
    add_definitions(-D'BOARD=BOARD_AVR_MKS_GEN_L_V21')
    add_definitions(-D'F_CPU=16000000L')
    add_definitions(-D'ARDUINO_ARCH_AVR')
    add_definitions(-D'ARDUINO=10808')
    add_definitions(-D'__AVR_ATmega2560__')

    include_directories("${CMAKE_CURRENT_LIST_DIR}")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src/libs/TimerInterrupt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/EEPROM/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/U8g2/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/LiquidTWI2")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Wire/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/LiquidCrystal/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/AccelStepper/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/TMCStepper/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SPI/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SoftwareSerial/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/TinyGPSPlus/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/cores/MegaCore")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/variants/100-pin-arduino-mega")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/AVR_examples/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Optiboot_flasher/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SD/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Servo/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Timer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include-fixed")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/avr/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/tool-unity")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv21/*.*
    )
endif()
if (CMAKE_BUILD_TYPE MATCHES "mksgenlv2")
    add_definitions(-D'DO_PRAGMA_\(x\)=_Pragma\(\#x\)')
    add_definitions(-D'DO_PRAGMA\(x\)=DO_PRAGMA_\(x\)')
    add_definitions(-D'PUSH_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic push\);DO_PRAGMA\(GCC diagnostic ignored \"-Wconversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wshadow\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-conversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-compare\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wignored-qualifiers\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wuseless-cast\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wall\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wextra\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wpedantic\"\);')
    add_definitions(-D'POP_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic pop\);')
    add_definitions(-D'PLATFORMIO=50100')
    add_definitions(-D'ARDUINO_AVR_ATmega2560')
    add_definitions(-D'BOARD=BOARD_AVR_MKS_GEN_L_V2')
    add_definitions(-D'F_CPU=16000000L')
    add_definitions(-D'ARDUINO_ARCH_AVR')
    add_definitions(-D'ARDUINO=10808')
    add_definitions(-D'__AVR_ATmega2560__')

    include_directories("${CMAKE_CURRENT_LIST_DIR}")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src/libs/TimerInterrupt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/EEPROM/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/U8g2/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/LiquidTWI2")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Wire/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/LiquidCrystal/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/AccelStepper/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/TMCStepper/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SPI/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SoftwareSerial/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/TinyGPSPlus/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/cores/MegaCore")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/variants/100-pin-arduino-mega")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/AVR_examples/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Optiboot_flasher/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SD/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Servo/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Timer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include-fixed")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/avr/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/tool-unity")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv2/*.*
    )
endif()
if (CMAKE_BUILD_TYPE MATCHES "mksgenlv1")
    add_definitions(-D'DO_PRAGMA_\(x\)=_Pragma\(\#x\)')
    add_definitions(-D'DO_PRAGMA\(x\)=DO_PRAGMA_\(x\)')
    add_definitions(-D'PUSH_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic push\);DO_PRAGMA\(GCC diagnostic ignored \"-Wconversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wshadow\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-conversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-compare\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wignored-qualifiers\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wuseless-cast\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wall\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wextra\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wpedantic\"\);')
    add_definitions(-D'POP_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic pop\);')
    add_definitions(-D'PLATFORMIO=50100')
    add_definitions(-D'ARDUINO_AVR_ATmega2560')
    add_definitions(-D'BOARD=BOARD_AVR_MKS_GEN_L_V1')
    add_definitions(-D'F_CPU=16000000L')
    add_definitions(-D'ARDUINO_ARCH_AVR')
    add_definitions(-D'ARDUINO=10808')
    add_definitions(-D'__AVR_ATmega2560__')

    include_directories("${CMAKE_CURRENT_LIST_DIR}")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src/libs/TimerInterrupt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/EEPROM/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/U8g2/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/LiquidTWI2")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Wire/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/LiquidCrystal/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/AccelStepper/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/TMCStepper/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SPI/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SoftwareSerial/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/TinyGPSPlus/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/cores/MegaCore")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/variants/100-pin-arduino-mega")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/AVR_examples/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Optiboot_flasher/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/SD/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Servo/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduino-avr-megacore/libraries/Timer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/lib/gcc/avr/5.4.0/include-fixed")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-atmelavr@1.50400.190710/avr/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/tool-unity")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/mksgenlv1/*.*
    )
endif()
if (CMAKE_BUILD_TYPE MATCHES "esp32")
    add_definitions(-D'DO_PRAGMA_\(x\)=_Pragma\(\#x\)')
    add_definitions(-D'DO_PRAGMA\(x\)=DO_PRAGMA_\(x\)')
    add_definitions(-D'PUSH_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic push\);DO_PRAGMA\(GCC diagnostic ignored \"-Wconversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wshadow\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-conversion\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wsign-compare\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wignored-qualifiers\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wuseless-cast\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wall\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wextra\"\);DO_PRAGMA\(GCC diagnostic ignored \"-Wpedantic\"\);')
    add_definitions(-D'POP_NO_WARNINGS=DO_PRAGMA\(GCC diagnostic pop\);')
    add_definitions(-D'PLATFORMIO=50100')
    add_definitions(-D'ARDUINO_ESP32_DEV')
    add_definitions(-D'BOARD=BOARD_ESP32_ESP32DEV')
    add_definitions(-D'ESP32')
    add_definitions(-D'ESP_PLATFORM')
    add_definitions(-D'F_CPU=240000000L')
    add_definitions(-D'HAVE_CONFIG_H')
    add_definitions(-D'MBEDTLS_CONFIG_FILE=\"mbedtls/esp_config.h\"')
    add_definitions(-D'ARDUINO=10805')
    add_definitions(-D'ARDUINO_ARCH_ESP32')
    add_definitions(-D'ARDUINO_VARIANT=\"esp32\"')
    add_definitions(-D'ARDUINO_BOARD=\"Espressif ESP32 Dev Module\"')

    include_directories("${CMAKE_CURRENT_LIST_DIR}")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/BluetoothSerial/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/src/libs/TimerInterrupt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/EEPROM/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/WiFi/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/U8g2/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/LiquidTWI2")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/Wire/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/LiquidCrystal/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/AccelStepper/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/TMCStepper/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/SPI/src")
    include_directories("${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/TinyGPSPlus/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/config")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/app_trace")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/app_update")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/asio")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/bootloader_support")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/bt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/coap")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/console")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/driver")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp-tls")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp32")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_adc_cal")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_event")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_http_client")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_http_server")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_https_ota")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp_ringbuf")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/ethernet")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/expat")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/fatfs")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/freemodbus")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/freertos")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/heap")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/idf_test")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/jsmn")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/json")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/libsodium")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/log")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/lwip")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/mbedtls")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/mdns")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/micro-ecc")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/mqtt")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/newlib")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/nghttp")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/nvs_flash")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/openssl")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/protobuf-c")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/protocomm")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/pthread")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/sdmmc")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/smartconfig_ack")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/soc")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/spi_flash")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/spiffs")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/tcp_transport")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/tcpip_adapter")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/ulp")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/vfs")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/wear_levelling")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/wifi_provisioning")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/wpa_supplicant")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/xtensa-debug-module")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp-face")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/esp32-camera")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/tools/sdk/include/fb_gfx")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/cores/esp32")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/variants/esp32")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/ArduinoOTA/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/AsyncUDP/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/AzureIoT/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/BLE/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/DNSServer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/ESP32/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/ESPmDNS/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/FFat/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/FS/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/HTTPClient/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/HTTPUpdate/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/NetBIOS/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/Preferences/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/SD/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/SD_MMC/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/SPIFFS/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/SimpleBLE/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/Ticker/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/Update/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/WebServer/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/framework-arduinoespressif32/libraries/WiFiClientSecure/src")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-xtensa32/xtensa-esp32-elf/include/c++/5.2.0")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-xtensa32/xtensa-esp32-elf/include/c++/5.2.0/xtensa-esp32-elf")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-xtensa32/lib/gcc/xtensa-esp32-elf/5.2.0/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-xtensa32/lib/gcc/xtensa-esp32-elf/5.2.0/include-fixed")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/toolchain-xtensa32/xtensa-esp32-elf/include")
    include_directories("$ENV{HOMEDRIVE}$ENV{HOMEPATH}/.platformio/packages/tool-unity")

    FILE(GLOB_RECURSE EXTRA_LIB_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/.pio/libdeps/esp32/*.*
    )
endif()

FILE(GLOB_RECURSE SRC_LIST
    ${CMAKE_CURRENT_LIST_DIR}/src/*.*
    ${CMAKE_CURRENT_LIST_DIR}/src/libs/*.*
)

list(APPEND SRC_LIST ${EXTRA_LIB_SOURCES})
